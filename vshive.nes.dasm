; Copyright 2024 Jean-Baptiste M. "JBQ" "Djaybee" Queru
;
; This program is free software: you can redistribute it and/or modify
; it under the terms of the GNU Affero General Public License as
; published by the Free Software Foundation, either version 3 of the
; License, or (at your option) any later version.
;
; This program is distributed in the hope that it will be useful,
; but WITHOUT ANY WARRANTY; without even the implied warranty of
; MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the
; GNU Affero General Public License for more details.
;
; You should have received a copy of the GNU Affero General Public License
; along with this program. If not, see <https://www.gnu.org/licenses/>.
;
; SPDX-License-Identifier: AGPL-3.0-or-later

; Source format:
;	- ASCII
;	- hard tabs, 8 characters wide, except in ASCII art
;	- 120 columns overall
;	- Standalone block comments in the first 80 columns
;	- Code-related block comments allowed in the last 80 columns
;	- Rulers at 40, 80 and 120 columns help source width

; #############################################################################
; #############################################################################
; #############################################################################
; ########                                                             ########
; ########                                                             ########
; ########                           VS HIVE                           ########
; ########                                                             ########
; ########       PREVENT COMPUTERS FROM JOINING AN AI HIVE MIND        ########
; ########                                                             ########
; ########              FOR NINTENDO ENTERTAINMENT SYSTEM              ########
; ########                                                             ########
; ########                                                             ########
; #############################################################################
; #############################################################################
; #############################################################################

	processor	6502

; #############################################################################
; #############################################################################
; ###                                                                       ###
; ###                                                                       ###
; ###                       NES Hardware Definitions                        ###
; ###                                                                       ###
; ###                                                                       ###
; #############################################################################
; #############################################################################

; ###############################
; ##                           ##
; ##  Audio-related registers  ##
; ##                           ##
; ###############################

_APUSQ1CTRL	equ	$4000
_APUSQ1SWEEP	equ	$4001
_APUSQ1LO	equ	$4002
_APUSQ1HI	equ	$4003
_APUSQ2CTRL	equ	$4004
_APUSQ2SWEEP	equ	$4005
_APUSQ2LO	equ	$4006
_APUSQ2HI	equ	$4007
_APUTRICTRL	equ	$4008
_APUTRILO	equ	$400A
_APUTRIHI	equ	$400B
_APUNSECTRL	equ	$400C
_APUNSELO	equ	$400E
_APUNSEHI	equ	$400F
_APUDMCCTRL	equ	$4010
_APUDMCRAW	equ	$4011
_APUDMCADDR	equ	$4012
_APUDMCLEN	equ	$4013
;			$4014 is in the sprite section
_APUSTATUS	equ	$4015
;			$4016 is in the joypad section
_APUSEQ		equ	$4017

; ##################################
; ##                              ##
; ##  Graphics-related registers  ##
; ##                              ##
; ##################################

_PPUCTRL	equ	$2000		; ixdtsvaa
					; ||||||||
					; ||||||++- background table address in PPU address space
					; ||||||        (with caveat that only 2 of those are populated on the NES
					; ||||||        itself, such that in most situations 2 of those are real and
					; ||||||        2 are mirrored, with the actual arrangement handled by the
					; ||||||        cartridge, including some exotic arrangements)
					; ||||||     00 = $2000
					; ||||||     01 = $2400
					; ||||||     10 = $2800
					; ||||||     11 = $2C00
					; |||||+--- increment direction when accessing
					; |||||     _PPUDATA
					; |||||      0 = horizontal (1 byte increment)
					; |||||      1 = vertical (32 byte increment)
					; ||||+---- sprite bitmap address in PPU address space
					; ||||       0 = $0000
					; ||||       1 = $1000
					; ||||       (ignored with 8x16 sprites)
					; |||+----- background bitmap address in PPU address space
					; |||        0 = $0000
					; |||        1 = $1000
					; ||+------ double-height sprites
					; ||         0 = 8x8 sprites
					; ||         1 = 8x16 sprites
					; |+------- communication with external PPU
					; |          0 = get backrgound from external
					; |          1 = send background to external
					; |          NEVER SET TO 1 ON A REAL NES
					; +-------- interrupt enable
					;            0 = NMI disabled
					;            1 = NMI enabled
_PPUMASK	equ	$2001
_PPUSTATUS	equ	$2002
_PPUSCROLL	equ	$2005
_PPUADDR	equ	$2006
_PPUDATA	equ	$2007

; ################################
; ##                            ##
; ##  Sprite-related registers  ##
; ##                            ##
; ################################

_OAMADDR	equ	$2003
_OAMDATA	equ	$2004
_OAMDMA		equ	$4014

; ################################
; ##                            ##
; ##  Joypad-related registers  ##
; ##                            ##
; ################################

_JOYPAD1	equ	$4016
_JOYPAD2	equ	$4017

; #############################################################################
; #############################################################################
; ###                                                                       ###
; ###                                                                       ###
; ###                              RAM Layout                               ###
; ###                                                                       ###
; ###                                                                       ###
; #############################################################################
; #############################################################################

	seg.u	zeropage
	org	$0000

	seg.u	stack
	org	$0100

	seg.u	oam
	org	$0200
oam_shadow	ds.b	256

		; for each of 64 sprites:
		; Y position
		; tile index number
		; attributes
		; X position

	seg.u	variables
	org	$0300

vbl_count	ds.b	1
level_bit	ds.b	1

; #############################################################################
; #############################################################################
; ###                                                                       ###
; ###                                                                       ###
; ###                              iNES Header                              ###
; ###                                                                       ###
; ###                                                                       ###
; #############################################################################
; #############################################################################

	seg	header
	org	$0

	dc.b	"NES",$1A	; iNES file format identifier, 1A = EOF
	dc.b	2		; 2 * 16kB PRG ROM
	dc.b	1		; 1 * 8kB CHR ROM
	dc.b	%00000001	; iNES flags 6
		;||||||||
		;|||||||+-------- VRAM arrangement, 0 = vertical or mapper
		;|||||||		  1 = horizontal
		;||||||+--------- Persistent 8kB PRG RAM at $6000
		;|||||+---------- Trainer (typically unused)
		;||||+----------- 4kB VRAM
		;++++------------ Low 4 bits of mapper number. 0 = NROM
	dc.b 	%00000000	; iNES flags 7
		;||||||||
		;|||||||+-------- VS Unisystem
		;||||||+--------- PlayChoice-10
		;||||++---------- 00 = iNES header format
		;++++------------ Upper 4 bits of mapper number
	dc.b	0,0,0,0,0,0,0,0	; iNes flags 8-15, reserved, use NES 2.0 format
        			; 	for extended features

; #############################################################################
; #############################################################################
; ###                                                                       ###
; ###                                                                       ###
; ###                               Init code                               ###
; ###                                                                       ###
; ###                                                                       ###
; #############################################################################
; #############################################################################

	seg	prg_rom
	org	$10
	rorg	$8000

; ######################
; ######################
; ###                ###
; ###  Machine init  ###
; ###                ###
; ######################
; ######################

; Execution starts here
Reset:

; ***************
; **           **
; ** CPU setup **
; **           **
; ***************

	LDX	#$FF		; set stack at $01FF (stack is always $01xx)
	TXS

	CLD			; disable BCD mode, not present in NES 2A03 CPU
	SEI			; inhibit maskable interrupts

; *****************
; **             **
; ** Disable APU **
; **             **
; *****************

	LDA	#$40
	STA	_APUSEQ		; inhibit APU sequencer interrupts

	LDA	#0
	STA	_APUDMCCTRL	; disable DMC interrupts
	LDX	_APUSTATUS	; clear DMC pending interrupt (as a side effect of reading that register)
	STA	_APUSTATUS	; disable audio

; **************************
; **                      **
; ** Wait until first VBL **
; **                      **
; **************************

PollVBLInit1:
	BIT	_PPUSTATUS
	NOP			; pad loop so that it's neither a multiple of 8 clocks nor of 11 clocks
				; that's because the dendy frame takes a whole number of cycles that's
				; a multiple of both 8 and 11, and there's a known race condition where
				; the bit could be read as zero *and* cleared by a poorly times read.
	BPL	PollVBLInit1

; ***************
; **           **
; ** Clear RAM **
; **           **
; ***************

; TODO: investigate whether there's a shorter way
	LDA	#0
	TAX
InitRAM:
	STA	$0,X
	STA	$100,X
	STA	$200,X
	STA	$300,X
	STA	$400,X
	STA	$500,X
	STA	$600,X
	STA	$700,X
	INX
	BNE	InitRAM

; ***************************
; **                       **
; ** Wait until second VBL **
; **                       **
; ***************************

PollVBLInit2:
	BIT	_PPUSTATUS
	NOP			; pad loop so that it's neither a multiple of 8 clocks nor of 11 clocks
				; that's because the dendy frame takes a whole number of cycles that's
				; a multiple of both 8 and 11, and there's a known race condition where
				; the bit could be read as zero *and* cleared by a poorly times read.
	BPL	PollVBLInit2
; From this point PPU is ready to use

; #######################
; #######################
; ###                 ###
; ###  Graphics init  ###
; ###                 ###
; #######################
; #######################

; *** init PPU ***
	LDA	#0
	STA	_PPUMASK	; disable graphics
	LDX	_PPUSTATUS	; clear NMI VBL pending interrupt (as side effect of readng that register)
	LDA	#%10000000	; enable NMI
        STA	_PPUCTRL

; *** clear VRAM ***
; unlike plain RAM, the VRAM pointer _PPUADDR auto-increments, so it's easier to clear a large area.
	LDX	#>$2000
	LDY	#<$2000
	STX	_PPUADDR	; set PPU Address to $2000, beginning of VRAM
	STY	_PPUADDR

	LDY	#0		; 256 outer loops
	TYA
InitVRAM1:
	LDX	#16		; 16 inner loops, 4096 bytes
InitVRAM2:
	STA	_PPUDATA
	DEX
	BNE	InitVRAM2
	DEY
	BNE	InitVRAM1

; *** prepare OAM shadow with sprites out of the way ***
	CLC
	LDX	#$40
InitSprite:
	LDA	#$FF
	STA	oam_shadow,Y
	TYA
	ADC	#4
	TAY
	DEX
	BNE	InitSprite

; *** clear palette ***
	LDX	#>$3F00
	LDY	#<$3F00
	STX	_PPUADDR
	STY	_PPUADDR

	LDA	#$1D		; black (!)
	LDX	#32
InitPalette:
	STA	_PPUDATA
	DEX
	BNE	InitPalette

; *** reset address and scroll position after accessing PPU data ***
	LDA	#0
	STA	_PPUSCROLL
	STA	_PPUSCROLL
	LDA	#%10000000
	STA	_PPUCTRL

; #############################################################################
; #############################################################################
; ###                                                                       ###
; ###                                                                       ###
; ###                             Program setup                             ###
; ###                                                                       ###
; ###                                                                       ###
; #############################################################################
; #############################################################################

; ########################
; ########################
; ###                  ###
; ###  Graphics setup  ###
; ###                  ###
; ########################
; ########################

	LDA	#0
	STA	vbl_count
WaitVBLSetup1:
	CMP	vbl_count
	BEQ	WaitVBLSetup1

; *** setup while rendering is still off, no performance concern ***

; *** set up palette ***
	LDX	#>$3F01
	LDY	#<$3F01
	STX	_PPUADDR
	STY	_PPUADDR

	LDA	#$26
	STA	_PPUDATA
	LDA	#$16
	STA	_PPUDATA
	LDA	#$36
	STA	_PPUDATA

; *** write level tiles ***
	LDX	#>$2000
	LDY	#<$2000
	STX	_PPUADDR
	STY	_PPUADDR

	LDY	#0
SetBG:
	LDA	Level0,Y
	STA	level_bit

	repeat	8
	ASL	level_bit
	ROL
	AND	#1
	STA	_PPUDATA
	repend

	INY
	CPY	#120
	BNE	SetBG

; *** reset address and scroll position after accessing PPU data ***
	LDA	#0
	STA	_PPUSCROLL
	STA	_PPUSCROLL
	LDA	#%10000000
	STA	_PPUCTRL

	LDA	#0
	STA	vbl_count
WaitVBLSetup2:
	CMP	vbl_count
	BEQ	WaitVBLSetup2

; *** turn rendering on ***
	LDA	#%00011110
	STA	_PPUMASK

; *** init OAM data ***
	LDA	#$2
	STA	_OAMDMA

; *** reset address and scroll position after accessing PPU data ***
	LDA	#0
	STA	_PPUSCROLL
	STA	_PPUSCROLL
	LDA	#%10000000
	STA	_PPUCTRL

; #############################################################################
; #############################################################################
; ###                                                                       ###
; ###                                                                       ###
; ###                               Main Loop                               ###
; ###                                                                       ###
; ###                                                                       ###
; #############################################################################
; #############################################################################

MainLoop:
	LDA	#0
	STA	vbl_count
WaitVBLMain:
	CMP	vbl_count
	BEQ	WaitVBLMain

; *** update sprites first ***
	LDA	#>oam_shadow
	STA	_OAMDMA

	LDA	$FE
	ASL
	STA	_PPUSCROLL
	LDA	#0
	STA	_PPUSCROLL

	LDA	#%10000000
	BCC	DoneCtrl
	ORA	#%00000001
DoneCtrl:
	STA	_PPUCTRL

	INC	$FE

	JMP	MainLoop

; #############################################################################
; #############################################################################
; ###                                                                       ###
; ###                                                                       ###
; ###                          Interrupt Handlers                           ###
; ###                                                                       ###
; ###                                                                       ###
; #############################################################################
; #############################################################################

NMIHandler:
	INC	vbl_count
	RTI

IRQHandler:
	RTI

; #############################################################################
; #############################################################################
; ###                                                                       ###
; ###                                                                       ###
; ###                                 Data                                  ###
; ###                                                                       ###
; ###                                                                       ###
; #############################################################################
; #############################################################################

Level0:
	byte	%00000000,%00000000,%00000000,%00000000
	byte	%00000000,%00000000,%00000000,%00000000
	byte	%00000000,%00000000,%00000000,%00000000
	byte	%00000000,%00000000,%00000000,%00000000
	byte	%00000000,%00000000,%00000000,%00000000
	byte	%00000000,%00000000,%00000000,%00000000
	byte	%00000000,%00000000,%00000000,%00000000
	byte	%00000000,%00000000,%00000000,%00000000
	byte	%00000000,%01111000,%00000000,%00000000
	byte	%00000000,%00000000,%00000000,%00000000
	byte	%00000000,%00000000,%00000000,%00000000
	byte	%00000000,%00000000,%00000000,%00000000
	byte	%00000000,%00000000,%00000000,%00000000
	byte	%00000000,%00000000,%00000000,%00000000
	byte	%00000000,%00000000,%00000000,%00000000
	byte	%00000000,%00000000,%00000000,%00000000
	byte	%00000000,%00000000,%00000000,%00000000
	byte	%00000000,%00000000,%00000000,%00000000
	byte	%00000000,%00000000,%00000000,%00000000
	byte	%00000000,%00000000,%00000000,%00000000
	byte	%00000000,%00000000,%00000000,%00000000
	byte	%00000000,%00000000,%00000000,%00000000
	byte	%00000000,%00000000,%10000000,%00000000
	byte	%00000000,%00000000,%11111100,%00000000
	byte	%00000000,%00000000,%00000100,%00000000
	byte	%00000000,%00000000,%00000000,%00000000
	byte	%00000000,%00000000,%00000000,%00000000
	byte	%00000000,%00000000,%00000000,%00000000
	byte	%00000000,%00000000,%00000000,%00000000
	byte	%00000000,%00000000,%00000000,%00000000

; #############################################################################
; #############################################################################
; ###                                                                       ###
; ###                                                                       ###
; ###                              CPU Vectors                              ###
; ###                                                                       ###
; ###                                                                       ###
; #############################################################################
; #############################################################################

	org	$800A
	rorg	$FFFA
	dc.w	NMIHandler
	dc.w	Reset
	dc.w	IRQHandler

; #############################################################################
; #############################################################################
; ###                                                                       ###
; ###                                                                       ###
; ###                               Graphics                                ###
; ###                                                                       ###
; ###                                                                       ###
; #############################################################################
; #############################################################################

	seg	chr_rom
	org	$8010		; not real, but gives the correct file layout
	rorg	$0

	dc.b	%00000000
	dc.b	%00000000
	dc.b	%00000000
	dc.b	%00000000
	dc.b	%00000000
	dc.b	%00000000
	dc.b	%00000000
	dc.b	%00000000

	dc.b	%00000000
	dc.b	%00000000
	dc.b	%00000000
	dc.b	%00000000
	dc.b	%00000000
	dc.b	%00000000
	dc.b	%00000000
	dc.b	%00000000

	dc.b	%11111111
	dc.b	%11111111
	dc.b	%11111101
	dc.b	%11111101
	dc.b	%11111101
	dc.b	%11111101
	dc.b	%11000001
	dc.b	%11111111

	dc.b	%00000000
	dc.b	%01111100
	dc.b	%01000010
	dc.b	%01000010
	dc.b	%01000010
	dc.b	%01000010
	dc.b	%00111110
	dc.b	%00000000

	org	$A00F
	rorg	$1FFF
	dc.b	0

; Source width guidelines
; 3456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890
; 345678901234567890123456789012345678901234567890123456789012345678901234567890
;                                       12345678901234567890123456789012345678901234567890123456789012345678901234567890

