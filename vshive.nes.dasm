; Copyright 2024 Jean-Baptiste M. "JBQ" "Djaybee" Queru
;
; This program is free software: you can redistribute it and/or modify
; it under the terms of the GNU Affero General Public License as
; published by the Free Software Foundation, either version 3 of the
; License, or (at your option) any later version.
;
; As an added restriction, if you make the program available for
; third parties to use on hardware you own, such as public gaming
; cabinets (whether or not in a gaming arcade, whether or not
; coin-operated or otherwise for a fee,) the conditions of
; section 13 will apply even if no network is involved.
;
; This program is distributed in the hope that it will be useful,
; but WITHOUT ANY WARRANTY; without even the implied warranty of
; MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the
; GNU Affero General Public License for more details.
;
; You should have received a copy of the GNU Affero General Public License
; along with this program. If not, see <https://www.gnu.org/licenses/>.
;
; SPDX-License-Identifier: AGPL-3.0-or-later

; Coding style:
;	- ASCII
;	- hard tabs, 8 characters wide, except in ASCII art
;	- 120 columns overall
;	- Standalone block comments in the first 80 columns
;	- Code-related block comments allowed in the last 80 columns
;	- Rulers at 40, 80 and 120 columns help source width
;	- Global symbols for code are CamelCase
;	- Local symbols for code are lowerCamelCase
;	- Symbols for variables are snake_case
;	- Symbols for hardware registers are ALL_CAPS
;	- Related symbols start with the same prefix (so they sort together)
;	- Include but comment out instructions that help readability but
;		don't do anything (e.g. redundant CLC when the carry is
;		guaranteed already to be clear)

; #############################################################################
; #############################################################################
; #############################################################################
; ########                                                             ########
; ########                                                             ########
; ########                           VS HIVE                           ########
; ########                                                             ########
; ########       PREVENT COMPUTERS FROM JOINING AN AI HIVE MIND        ########
; ########                                                             ########
; ########              FOR NINTENDO ENTERTAINMENT SYSTEM              ########
; ########                                                             ########
; ########                                                             ########
; #############################################################################
; #############################################################################
; #############################################################################

	processor	6502

; #############################################################################
; #############################################################################
; ###                                                                       ###
; ###                                                                       ###
; ###                       NES Hardware Definitions                        ###
; ###                                                                       ###
; ###                                                                       ###
; #############################################################################
; #############################################################################

; ###############################
; ##                           ##
; ##  Audio-related registers  ##
; ##                           ##
; ###############################

_APUSQ1CTRL	equ	$4000
_APUSQ1SWEEP	equ	$4001
_APUSQ1LO	equ	$4002
_APUSQ1HI	equ	$4003
_APUSQ2CTRL	equ	$4004
_APUSQ2SWEEP	equ	$4005
_APUSQ2LO	equ	$4006
_APUSQ2HI	equ	$4007
_APUTRICTRL	equ	$4008
_APUTRILO	equ	$400A
_APUTRIHI	equ	$400B
_APUNSECTRL	equ	$400C
_APUNSELO	equ	$400E
_APUNSEHI	equ	$400F
_APUDMCCTRL	equ	$4010
_APUDMCRAW	equ	$4011
_APUDMCADDR	equ	$4012
_APUDMCLEN	equ	$4013
;			$4014 is in the sprite section
_APUSTATUS	equ	$4015
;			$4016 is in the joypad section
_APUSEQ		equ	$4017

; ##################################
; ##                              ##
; ##  Graphics-related registers  ##
; ##                              ##
; ##################################

_PPUCTRL	equ	$2000		; ixdtsvaa
					; ||||||||
					; ||||||++- background table address in PPU address space
					; ||||||        (with caveat that only 2 of those are populated on the NES
					; ||||||        itself, such that in most situations 2 of those are real and
					; ||||||        2 are mirrored, with the actual arrangement handled by the
					; ||||||        cartridge, including some exotic arrangements)
					; ||||||     00 = $2000
					; ||||||     01 = $2400
					; ||||||     10 = $2800
					; ||||||     11 = $2C00
					; |||||+--- increment direction when accessing
					; |||||     _PPUDATA
					; |||||      0 = horizontal (1 byte increment)
					; |||||      1 = vertical (32 byte increment)
					; ||||+---- sprite bitmap address in PPU address space
					; ||||       0 = $0000
					; ||||       1 = $1000
					; ||||       (ignored with 8x16 sprites)
					; |||+----- background bitmap address in PPU address space
					; |||        0 = $0000
					; |||        1 = $1000
					; ||+------ double-height sprites
					; ||         0 = 8x8 sprites
					; ||         1 = 8x16 sprites
					; |+------- communication with external PPU
					; |          0 = get backrgound from external
					; |          1 = send background to external
					; |          NEVER SET TO 1 ON A REAL NES
					; +-------- interrupt enable
					;            0 = NMI disabled
					;            1 = NMI enabled
_PPUMASK	equ	$2001
_PPUSTATUS	equ	$2002
_PPUSCROLL	equ	$2005
_PPUADDR	equ	$2006
_PPUDATA	equ	$2007

; ################################
; ##                            ##
; ##  Sprite-related registers  ##
; ##                            ##
; ################################

_OAMADDR	equ	$2003
_OAMDATA	equ	$2004
_OAMDMA		equ	$4014

; ################################
; ##                            ##
; ##  Joypad-related registers  ##
; ##                            ##
; ################################

_INPSTROBE	equ	$4016		; W .....210
					;        |||
					;        ||+- output bit 0, joypad strobe
					;        |+-- output bit 1, typically unconnected
					;        +--- output bit 2, typically unconnected

_INPPAD1	equ	$4016		; R ...tlmej
					;      |||||
					;      ||||+- joypad
					;      |||+-- expansion port
					;      ||+--- microphone
					;      |+---- gun lightsense
					;      +----- gun trigger

_INPPAD2	equ	$4017		; see _INPPAD1

; #############################################################################
; #############################################################################
; ###                                                                       ###
; ###                                                                       ###
; ###                              RAM Layout                               ###
; ###                                                                       ###
; ###                                                                       ###
; #############################################################################
; #############################################################################

	seg.u	zeropage
	org	$0000

joypad:		ds.b	1		; abspudlr
					; ||||||||
					; |||||||+- right
					; ||||||+-- left
					; |||||+--- down
					; ||||+---- up
					; |||+----- start (pause)
					; ||+------ select
					; |+------- button B
					; +-------- button A

jump_state:	ds.b	1	; position in the jump curve
				; 0 = not jumping

delta_x:	ds.b	1
delta_y:	ds.b	1

coll_addr:	ds.b	1

	seg.u	stack
	org	$0100

	seg.u	oam
	org	$0200
oam_shadow	ds.b	256

		; for each of 64 sprites:
		; Y position
		; tile index number
		; attributes
		; X position

	seg.u	variables
	org	$0300

vbl_count	ds.b	1
level_bit	ds.b	1
sprite_x	ds.b	1
sprite_y	ds.b	1

; #############################################################################
; #############################################################################
; ###                                                                       ###
; ###                                                                       ###
; ###                              iNES Header                              ###
; ###                                                                       ###
; ###                                                                       ###
; #############################################################################
; #############################################################################

	seg	header
	org	$0

	dc.b	"NES",$1A	; iNES file format identifier, 1A = EOF
	dc.b	2		; 2 * 16kB PRG ROM
	dc.b	1		; 1 * 8kB CHR ROM
	dc.b	%00000001	; iNES flags 6
		;||||||||
		;|||||||+-------- VRAM arrangement, 0 = vertical or mapper
		;|||||||		  1 = horizontal
		;||||||+--------- Persistent 8kB PRG RAM at $6000
		;|||||+---------- Trainer (typically unused)
		;||||+----------- 4kB VRAM
		;++++------------ Low 4 bits of mapper number. 0 = NROM
	dc.b 	%00000000	; iNES flags 7
		;||||||||
		;|||||||+-------- VS Unisystem
		;||||||+--------- PlayChoice-10
		;||||++---------- 00 = iNES header format
		;++++------------ Upper 4 bits of mapper number
	dc.b	0,0,0,0,0,0,0,0	; iNes flags 8-15, reserved, use NES 2.0 format
				; 	for extended features

; #############################################################################
; #############################################################################
; ###                                                                       ###
; ###                                                                       ###
; ###                               Init code                               ###
; ###                                                                       ###
; ###                                                                       ###
; #############################################################################
; #############################################################################

	seg	prg_rom
	org	$10
	rorg	$8000
PrgCodeBegin:

; ######################
; ######################
; ###                ###
; ###  Machine init  ###
; ###                ###
; ######################
; ######################

; Execution starts here
Reset:

; ***************
; **           **
; ** CPU setup **
; **           **
; ***************

	LDX	#$FF		; set stack at $01FF (stack is always $01xx)
	TXS

	CLD			; disable BCD mode, not present in NES 2A03 CPU
	SEI			; inhibit maskable interrupts

; *****************
; **             **
; ** Disable APU **
; **             **
; *****************

	LDA	#$40
	STA	_APUSEQ		; inhibit APU sequencer interrupts

	LDA	#0
	STA	_APUDMCCTRL	; disable DMC interrupts
	LDX	_APUSTATUS	; clear DMC pending interrupt (as a side effect
				;    of reading that register)
	STA	_APUSTATUS	; disable audio

; **************************
; **                      **
; ** Wait until first VBL **
; **                      **
; **************************

PollVBLInit1:
	BIT	_PPUSTATUS
	NOP				; pad loop so that it's neither a multiple of 8 clocks nor of 11 clocks
					; that's because the dendy frame takes a whole number of cycles that's
					; a multiple of both 8 and 11, and there's a known race condition where
					; the bit could be read as zero *and* cleared by a poorly times read.
	BPL	PollVBLInit1

; ***************
; **           **
; ** Clear RAM **
; **           **
; ***************

; TODO: investigate whether there's a shorter way
	LDA	#0
	TAX
InitRAM:
	STA	$0,X
	STA	$100,X
	STA	$200,X
	STA	$300,X
	STA	$400,X
	STA	$500,X
	STA	$600,X
	STA	$700,X
	INX
	BNE	InitRAM

; ***************************
; **                       **
; ** Wait until second VBL **
; **                       **
; ***************************

PollVBLInit2:
	BIT	_PPUSTATUS
	NOP				; pad loop so that it's neither a multiple of 8 clocks nor of 11 clocks
					; that's because the dendy frame takes a whole number of cycles that's
					; a multiple of both 8 and 11, and there's a known race condition where
					; the bit could be read as zero *and* cleared by a poorly times read.
	BPL	PollVBLInit2
; From this point PPU is ready to use

; #######################
; #######################
; ###                 ###
; ###  Graphics init  ###
; ###                 ###
; #######################
; #######################

; *** init PPU ***
	LDA	#0
	STA	_PPUMASK	; disable graphics
	LDX	_PPUSTATUS	; clear NMI VBL pending interrupt (as side
				;    effect of readng that register)
	LDA	#%10010000	; enable NMI
	STA	_PPUCTRL

; *** clear VRAM ***
; unlike plain RAM, the VRAM pointer _PPUADDR auto-increments, so it's easier
;    to clear a large area.
	LDX	#>$2000
	LDY	#<$2000
	STX	_PPUADDR	; set PPU Address to $2000, beginning of VRAM
	STY	_PPUADDR

	LDY	#0		; 256 outer loops
	TYA
InitVRAM1:
	LDX	#16		; 16 inner loops, 4096 bytes
InitVRAM2:
	STA	_PPUDATA
	DEX
	BNE	InitVRAM2
	DEY
	BNE	InitVRAM1

; *** prepare OAM shadow with sprites out of the way ***
	CLC
	LDX	#$40
InitSprite:
	LDA	#$FF
	STA	oam_shadow,Y
	TYA
	ADC	#4
	TAY
	DEX
	BNE	InitSprite

; *** clear palette ***
	LDX	#>$3F00
	LDY	#<$3F00
	STX	_PPUADDR
	STY	_PPUADDR

	LDA	#$1D		; black (!)
	LDX	#32
InitPalette:
	STA	_PPUDATA
	DEX
	BNE	InitPalette

; *** reset address and scroll position after accessing PPU data ***
	LDA	#0
	STA	_PPUSCROLL
	STA	_PPUSCROLL
	LDA	#%10010000
	STA	_PPUCTRL

; #############################################################################
; #############################################################################
; ###                                                                       ###
; ###                                                                       ###
; ###                             Program setup                             ###
; ###                                                                       ###
; ###                                                                       ###
; #############################################################################
; #############################################################################

; ########################
; ########################
; ###                  ###
; ###  Graphics setup  ###
; ###                  ###
; ########################
; ########################

	LDA	#0
	STA	vbl_count
WaitVBLSetup1:
	CMP	vbl_count
	BEQ	WaitVBLSetup1

; *** setup while rendering is still off, no performance concern ***

; *** set up palette ***
	LDX	#>$3F01
	LDY	#<$3F01
	STX	_PPUADDR
	STY	_PPUADDR

	LDA	#$26
	STA	_PPUDATA
	LDA	#$16
	STA	_PPUDATA
	LDA	#$36
	STA	_PPUDATA

	LDX	#>$3F11
	LDY	#<$3F11
	STX	_PPUADDR
	STY	_PPUADDR

	LDA	#$22
	STA	_PPUDATA
	LDA	#$12
	STA	_PPUDATA
	LDA	#$32
	STA	_PPUDATA

; *** write level tiles ***
	LDX	#>$2000
	LDY	#<$2000
	STX	_PPUADDR
	STY	_PPUADDR

	LDY	#0
SetBG:
	LDA	Level0,Y
	STA	level_bit

	repeat	8
	ASL	level_bit
	ROL
	AND	#1
	STA	_PPUDATA
	repend

	INY
	CPY	#120
	BNE	SetBG

; *** reset address and scroll position after accessing PPU data ***
	LDA	#0
	STA	_PPUSCROLL
	STA	_PPUSCROLL
	LDA	#%10010000
	STA	_PPUCTRL

; *** initialize sprite location ***
	LDA	#128
	STA	sprite_x
	STA	sprite_y

; *** everything is initialized, wait for VBL and turn things on ***
	LDA	#0
	STA	vbl_count
WaitVBLSetup2:
	CMP	vbl_count
	BEQ	WaitVBLSetup2

; *** init OAM data to avoid bit rot from unrefreshed OAM DRAM ***
	LDA	#$2
	STA	_OAMDMA

; *** turn rendering on ***
	LDA	#%00011110
	STA	_PPUMASK



; #############################################################################
; #############################################################################
; ###                                                                       ###
; ###                                                                       ###
; ###                               Main Loop                               ###
; ###                                                                       ###
; ###                                                                       ###
; #############################################################################
; #############################################################################

MainLoop:

; #####################
; #####################
; ###               ###
; ###  Read inputs  ###
; ###               ###
; #####################
; #####################

; *** Strobe the input devices so that they capture their button state ***
	LDA	#1
	STA	_INPSTROBE
	LDA	#0
	STA	_INPSTROBE

; *** Read bits serially from joypad ***
	LDA	#1
	STA	joypad		; Store 1 bit into that variable (ring counter)
ReadJoypad:
	LDA	_INPPAD1	; Read 1 serial bit from input port 1
				;	(low bit is the joypad)
	LSR			; Extract low bit in carry
	ROL	joypad		; Store carry in low bit, get high bit in carry
	BCC	ReadJoypad	; Keep going until the first bit comes
				;	out of the ring counter

; ###################
; ###################
; ###             ###
; ###  Game core  ###
; ###             ###
; ###################
; ###################


; ******************************
; **                          **
; ** Handle horizontal motion **
; **                          **
; ******************************

; *** Set it to zero, so it's easier to increment/decrement ***
	LDA	#0
	STA	delta_x

; *** Process horizontal motion from joypad L/R ***
InputHoriz:
	LDA	joypad
	AND	#%00000011	; L/R are in those 2 bits, mask the rest away
.checkLeft:
	CMP	#%00000010	; Check if L pressed but not R
	BNE	.doneLeft
	DEC	delta_x
	JMP	.done
.doneLeft:
.checkRight:
	CMP	#%00000001	; Check if R pressed but not L
	BNE	.doneRight
	INC	delta_x
.doneRight:
.done:

CollideHoriz:
	LDA	delta_x
	BEQ	MoveHorizDone
	BPL	CollideRightCheck
;	BMI	CollideLeftCheck

CollideLeftCheck:
;	LDA	delta_x
	CLC
	ADC	sprite_x
	TAX

	LDY	sprite_y

	JSR	CheckCollision
	BNE	.adjustLeft

	LDA	sprite_y
	CLC
	ADC	#7
	TAY

	LDA	delta_x
	ADC	sprite_x
	TAX

	JSR	CheckCollision
	BEQ	CollideHorizNone

.adjustLeft:
	CLC
	LDA	delta_x
	ADC	sprite_x
	CLC
	ADC	#8
	AND	#%11111000		; Align sprite on 8 pixels vertically
					;    That works because the sprite height is a multiple of 8
					;    Other heights need an adjustment
	STA	sprite_x
	JMP	MoveHorizDone

CollideRightCheck:
	; LDA	delta_x
	CLC
	ADC	sprite_x
	ADC	#7
	TAX

	LDY	sprite_y
	JSR	CheckCollision
	BNE	CollideRightAdjust

	LDA	sprite_y
	CLC
	ADC	#7
	TAY

	LDA	delta_x
	ADC	sprite_x
	ADC	#7
	TAX

	JSR	CheckCollision
	BEQ	CollideHorizNone

CollideRightAdjust:
	CLC
	LDA	delta_x
	ADC	sprite_x
	ADC	#7
	AND	#%11111000
	SEC
	SBC	#8
	STA	sprite_x
	JMP	MoveHorizDone

CollideHorizNone:
	LDA	delta_x
	CLC
	ADC	sprite_x
	STA	sprite_x
MoveHorizDone:

; ****************************
; **                        **
; ** Handle vertical motion **
; **                        **
; ****************************


; state: on platform vs in-air (could be jumping or falling)
;	sub-state: jump curve
; state: button on previous frame


; if previously on platform (jump state = 0)
;   if still on platform
;     if button previously not pressed
;     and if button now pressed
;       start jump
;   else (just left platform without jumping)
;     start jump mid-curve
; else (previously in air)
;   process jump curve
;   if fall onto platform
;     end jump


; *** Default motion is not to move ***
	LDA	#0
	STA	delta_y

; *** Process desired vertical motion ***
	LDA	#0
	CMP	jump_state	; 0 = still on platform
	BNE	InAir

; *** Was on platform in previous frame, check if still on platform ***
	LDX	sprite_x
	LDA	sprite_y
	CLC
	ADC	#8
	TAY
	JSR	CheckCollision
	BNE	OnPlatform

	LDA	sprite_x
	CLC
	ADC	#7
	TAX
	LDA	sprite_y
	ADC	#8
	TAY
	JSR	CheckCollision
	BNE	OnPlatform

; *** Just left platform, start to fall ***
	LDA	#20
	STA	jump_state
	INC	delta_y
	JMP	PhysicsDone

; Still on the platform ***
OnPlatform:
	LDA	joypad
	AND	#%00001000
	BEQ	PhysicsDone
	INC	jump_state
	JMP	PhysicsDone

InAir:
	LDA	#20
	CMP	jump_state
	BEQ	Falling
	DEC	delta_y
	INC	jump_state
	JMP	PhysicsDone

Falling:
	INC	delta_y
	JMP	PhysicsDone

PhysicsDone:

	LDA	delta_y
	BEQ	MoveVertDone		; No vertical motion, no need to check for vertical collisions
	BMI	CollideUpCheck		; Moving up, no need to check for bottom collisions

	; LDA	delta_y			; Compute coordinates of bottom-left corner after planned vertical motion
					; A already contains delta_y from previous operation
	CLC
	ADC	sprite_y
	; CLC				; Carry is already clear from previous operation
	ADC	#7			; 7 pixels down from top-left
	TAY

	LDX	sprite_x

	JSR	CheckCollision
	BNE	CollideDownAdjust	; Collision detected, adjust y accordingly

	LDA	delta_y			; Compute coordinates of bottom-right corner after planned vertical motion
	CLC
	ADC	sprite_y
	; CLC				; Carry is already clear from previous operation
	ADC	#7			; 7 pixels from top-left
	TAY

	LDA	sprite_x
	; CLC				; Carry is already clear from previous operation
	ADC	#7			; 7 pixels from top-left
	TAX

	JSR	CheckCollision
	BEQ	CollideVertNone		; No collision detected, this was the last test, bail out.

CollideDownAdjust:
	CLC
	LDA	delta_y
	ADC	sprite_y
	AND	#%11111000		; Align sprite on 8 pixels vertically
					;    That works because the sprite height is a multiple of 8
					;    Other heights need an adjustment
	STA	sprite_y
	LDA	#0
	STA	jump_state
	JMP	MoveVertDone

CollideUpCheck:
;	LDA	delta_y
	CLC
	ADC	sprite_y
	TAY

	LDX	sprite_x

	JSR	CheckCollision
	BNE	CollideUpAdjust

	LDA	delta_y
	CLC
	ADC	sprite_y
	TAY

	LDA	sprite_x
	; SEC				; Carry is always set from previous operation
	ADC	#6
	TAX

	JSR	CheckCollision
	BEQ	CollideVertNone

CollideUpAdjust:
	CLC
	LDA	delta_y
	ADC	sprite_y
	CLC
	ADC	#8
	AND	#%11111000		; Align sprite on 8 pixels vertically
					;    That works because the sprite height is a multiple of 8
					;    Other heights need an adjustment
	STA	sprite_y
	JMP	MoveVertDone

CollideVertNone:
	LDA	delta_y
	CLC
	ADC	sprite_y

;	CMP	#40
;	BCS	MoveTopOK
;	LDA	#40
;MoveTopOK:
;	CMP	#216
;	BCC	MoveBottomOK
;	LDA	#216
;MoveBottomOK:
	STA	sprite_y
MoveVertDone:

; ###############################
; ###############################
; ###                         ###
; ###  Prepare graphics data  ###
; ###                         ###
; ###############################
; ###############################

	LDA	sprite_x
	STA	oam_shadow + 3
	LDA	sprite_y
	SEC
	SBC	#1			; correct for sprite off-by-one on Y
	STA	oam_shadow + 0
	LDA	#0
	STA	oam_shadow + 1
	STA	oam_shadow + 2

; ##############################
; ##############################
; ###                        ###
; ###  Send graphics to PPU  ###
; ###                        ###
; ##############################
; ##############################

	LDA	#0
	STA	vbl_count
WaitVBLMain:
	CMP	vbl_count	; 4 cycles
	BEQ	WaitVBLMain	; 2 cycles when not taken
				; about 2267 cycles available from here
				;	until rendering starts

; *** update sprites first ***
	LDA	#>oam_shadow	; 2 cycles
	STA	_OAMDMA		; 4 + 513 or 514 cycles
				; about 1747 cycles available from here
				;	until rendering starts

	JMP	MainLoop

; #############################################################################
; #############################################################################
; ###                                                                       ###
; ###                                                                       ###
; ###                          Interrupt Handlers                           ###
; ###                                                                       ###
; ###                                                                       ###
; #############################################################################
; #############################################################################

NMIHandler:
	INC	vbl_count
	RTI

IRQHandler:
	RTI

; #############################################################################
; #############################################################################
; ###                                                                       ###
; ###                                                                       ###
; ###                            Helper Routines                            ###
; ###                                                                       ###
; ###                                                                       ###
; #############################################################################
; #############################################################################

; ####################################
; ####################################
; ###                              ###
; ###  Background Collision Check  ###
; ###                              ###
; ####################################
; ####################################

CheckCollision:
; Input: x and y in registers X and Y (!!!)
; Output: Z flag, set if there's a collision
; Modifies: AXYP and coll_addr

; Divide y by 8 to get the tile row, then multiply by 4 to get the
;    address offset of that row.
; It's cheaper to divide by 2 and clear the unnecessary bits: there
;    are 4 bytes for 8 pixels, i.e. 1 byte every 2 pixels (plus rounding).
	TYA
	LSR			; divide by 2
	AND	#%11111100	; round to row address offset
	STA	coll_addr

; Divide x by 8 to get the tile column, then divide by 8 again to
;    get the address offset of that column.
; That makes sense, there are 4 bytes for 256 pixels, i.e. 64 pixels
;    per byte.
; While locally there's a faster way to shift by 6 bits, we do it
;    the basic way because we'll later need the same value shifted
;    by only 3 bits.
	TXA
	LSR			; divide by 8 to get the tile number
	LSR
	LSR
	TAX			; store back since we'll need it later
	LSR			; divide by 8 to get the column offset
	LSR
	LSR

	CLC
	ADC	coll_addr	; compute the full offset into the level map
	TAY

	TXA
	AND	#7		; extract bit number

	TAX
	SEC			; set the bit to shift
	LDA	#0
.shift:
	ROR			; non-standard bit numbering, 0 is MSB
	DEX
	BPL	.shift

	AND	Level0,Y	; check the one bit we care about

	RTS			; and we're done!

PrgCodeEnd:

; #############################################################################
; #############################################################################
; ###                                                                       ###
; ###                                                                       ###
; ###                                 Data                                  ###
; ###                                                                       ###
; ###                                                                       ###
; #############################################################################
; #############################################################################

PrgDataBegin:

Level0:
	byte	%00000000,%00000000,%00000000,%00000000
	byte	%00000000,%00000000,%00000000,%00000000
	byte	%00111111,%11111111,%11111111,%11111100
	byte	%00100000,%00000000,%00000000,%00000100
	byte	%00100000,%00000000,%00000000,%00000100
	byte	%00100000,%00000000,%00000000,%00000100
	byte	%00100000,%00000000,%00000000,%00000100
	byte	%00100000,%00000000,%00000000,%00000100
	byte	%00100000,%01111000,%00000000,%00000100
	byte	%00100000,%00000000,%00000000,%00000100
	byte	%00100000,%00000000,%00000000,%00000100
	byte	%00100000,%00000000,%00000000,%00000100
	byte	%00100000,%00000000,%00000000,%00000100
	byte	%00100000,%00000000,%00000000,%00000100
	byte	%00100000,%00000000,%00000000,%00000100
	byte	%00100000,%00000000,%00000000,%00000100
	byte	%00100000,%00000000,%00000000,%00000100
	byte	%00100000,%00000000,%00000000,%00000100
	byte	%00100000,%00000000,%00000000,%00000100
	byte	%00100000,%00000000,%00000000,%00000100
	byte	%00100000,%00000000,%00000000,%00000100
	byte	%00100000,%00000000,%00000000,%00000100
	byte	%00100000,%00000000,%10000000,%00000100
	byte	%00100000,%00000000,%11111100,%00000100
	byte	%00100000,%00000000,%00000100,%00000100
	byte	%00100000,%00000000,%00000000,%00000100
	byte	%00100000,%00000000,%00000000,%00000100
	byte	%00111111,%11111111,%11111111,%11111100
	byte	%00000000,%00000000,%00000000,%00000000
	byte	%00000000,%00000000,%00000000,%00000000

PrgDataEnd:

; #############################################################################
; #############################################################################
; ###                                                                       ###
; ###                                                                       ###
; ###                              CPU Vectors                              ###
; ###                                                                       ###
; ###                                                                       ###
; #############################################################################
; #############################################################################

	org	$800A
	rorg	$FFFA
PrgVectorsBegin:
	dc.w	NMIHandler
	dc.w	Reset
	dc.w	IRQHandler

PrgVectorsEnd:

; #############################################################################
; #############################################################################
; ###                                                                       ###
; ###                                                                       ###
; ###                               Graphics                                ###
; ###                                                                       ###
; ###                                                                       ###
; #############################################################################
; #############################################################################

	seg	chr_rom

; #################
; #################
; ###           ###
; ###  Sprites  ###
; ###           ###
; #################
; #################

	org	$8010
	rorg	$0

Chr0Begin:

	dc.b	%11111111
	dc.b	%11111111
	dc.b	%11000011
	dc.b	%11000011
	dc.b	%11000011
	dc.b	%11000011
	dc.b	%11111111
	dc.b	%11111111

	dc.b	%11111111
	dc.b	%10000001
	dc.b	%10111101
	dc.b	%10111101
	dc.b	%10111101
	dc.b	%10111101
	dc.b	%10000001
	dc.b	%11111111

Chr0End:

; ###############
; ###############
; ###         ###
; ###  Tiles  ###
; ###         ###
; ###############
; ###############

	org	$9010
	rorg	$1000

Chr1Begin:

	dc.b	%00000000
	dc.b	%00000000
	dc.b	%00000000
	dc.b	%00000000
	dc.b	%00000000
	dc.b	%00000000
	dc.b	%00000000
	dc.b	%00000000

	dc.b	%00000000
	dc.b	%00000000
	dc.b	%00000000
	dc.b	%00000000
	dc.b	%00000000
	dc.b	%00000000
	dc.b	%00000000
	dc.b	%00000000

	dc.b	%11111111
	dc.b	%11111111
	dc.b	%11111101
	dc.b	%11111101
	dc.b	%11111101
	dc.b	%11111101
	dc.b	%11000001
	dc.b	%11111111

	dc.b	%00000000
	dc.b	%01111100
	dc.b	%01000010
	dc.b	%01000010
	dc.b	%01000010
	dc.b	%01000010
	dc.b	%00111110
	dc.b	%00000000

Chr1End:

	org	$A00F
	rorg	$1FFF
	dc.b	0

ChrEnd:

; Source width guidelines
; 3456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890
; 345678901234567890123456789012345678901234567890123456789012345678901234567890
;                                       12345678901234567890123456789012345678901234567890123456789012345678901234567890

